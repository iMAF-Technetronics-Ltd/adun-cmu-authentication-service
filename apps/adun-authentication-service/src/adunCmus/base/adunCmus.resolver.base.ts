/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAdunCmusArgs } from "./CreateAdunCmusArgs";
import { UpdateAdunCmusArgs } from "./UpdateAdunCmusArgs";
import { DeleteAdunCmusArgs } from "./DeleteAdunCmusArgs";
import { AdunCmusFindManyArgs } from "./AdunCmusFindManyArgs";
import { AdunCmusFindUniqueArgs } from "./AdunCmusFindUniqueArgs";
import { AdunCmus } from "./AdunCmus";
import { AdunCmusService } from "../adunCmus.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AdunCmus)
export class AdunCmusResolverBase {
  constructor(
    protected readonly service: AdunCmusService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AdunCmus",
    action: "read",
    possession: "any",
  })
  async _adunCmusesMeta(
    @graphql.Args() args: AdunCmusFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AdunCmus])
  @nestAccessControl.UseRoles({
    resource: "AdunCmus",
    action: "read",
    possession: "any",
  })
  async adunCmuses(
    @graphql.Args() args: AdunCmusFindManyArgs
  ): Promise<AdunCmus[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AdunCmus, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AdunCmus",
    action: "read",
    possession: "own",
  })
  async adunCmus(
    @graphql.Args() args: AdunCmusFindUniqueArgs
  ): Promise<AdunCmus | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdunCmus)
  @nestAccessControl.UseRoles({
    resource: "AdunCmus",
    action: "create",
    possession: "any",
  })
  async createAdunCmus(
    @graphql.Args() args: CreateAdunCmusArgs
  ): Promise<AdunCmus> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AdunCmus)
  @nestAccessControl.UseRoles({
    resource: "AdunCmus",
    action: "update",
    possession: "any",
  })
  async updateAdunCmus(
    @graphql.Args() args: UpdateAdunCmusArgs
  ): Promise<AdunCmus | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdunCmus)
  @nestAccessControl.UseRoles({
    resource: "AdunCmus",
    action: "delete",
    possession: "any",
  })
  async deleteAdunCmus(
    @graphql.Args() args: DeleteAdunCmusArgs
  ): Promise<AdunCmus | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
